#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('TestExpressTpl:server');
var http = require('http');
var fs=require('fs');

var mongoose=require('mongoose');
var User=require('../app/models/user');
var Chat=require('../app/models/chat');


/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

var io=require('socket.io')(server);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

//在线聊天模块
var onlineUsers={};
var onlineCount=0;

io.on('connection',function(socketio){

  console.log('222222222'+socketio.id);

  socketio.on('login',function(obj){
    console.log(JSON.stringify(obj));
    socketio.name=obj.name+'-'+obj.type;
    User.findOne({status:true,_id:obj._id},function(err,user){
      if(err){
        //socketio.emit('errorinfo','dberror');
        return console.log(err)
      }
      if(user){
        if(!onlineUsers.hasOwnProperty(obj.name+'-'+obj.type)) {

          onlineUsers[obj.name+'-'+obj.type] = {
            name: user.name,
            _id:user._id,
            socket: socketio,
            type:obj.type
          };
          onlineCount++;
          console.log(obj.name+'登录成功'+'ansuserlist'+obj._id+socketio.id+'当前用户数目是'+onlineCount);
        }
        /*
        else{
          onlineUsers[obj.name+'-'+obj.type].socket=socketio;
          console.log(obj.name+'登录成功,重连的情况'+'ansuserlist'+obj._id+socketio.id+'当前用户数目是'+onlineCount);
        }
        */
      }
      else{


      }
    });
  });

  socketio.on('connectsuccess',function(json){
    console.log('收到客户端的连接成功信号，参数是'+JSON.stringify(json));
    if(json.name&&json.name!=''){
      if(onlineUsers.hasOwnProperty(json.name)){
        //如果在线列表里面有参数传过来的人
        for(var p in onlineUsers){
          console.log('遍历的在线人是:'+p);
          if(p===json.name){
            //如果一样，就把socket对象替换成新的
            console.log('最近的socket对象id是:'+socketio.id);
            socketio.name=p;
            onlineUsers[p].socket=socketio;
          }
        }
      }
      else{
        //用户列表里不存在这个人，新建这个人
        console.log('新建这个人'+json.name);
        socketio.name=json.name;
        onlineUsers[json.name] = {
          name: json.name,
          _id:json.id,
          socket: socketio
        };
      }
    }
    else{

    }
  })

  socketio.on('disconnect',function(){
    console.log('触发了关闭连接事件，为什么呢'+socketio.id+socketio.name);

    if(onlineUsers.hasOwnProperty(socketio.name)){
      console.log(socketio.name+'下线了！');
      //说明是这个人触发了disconnect，把他从在线列表中删除
      delete onlineUsers[socketio.name];
      onlineCount--;
    }




    /*
     if(onlineUsers.hasOwnProperty(socketio.name)) {
     //发送下线
     //socketio.broadcast.emit('ansuserlist'+onlineUsers[socketio.name]._id,{_id:onlineUsers[socketio.name]._id,online:false});
     io.sockets.emit('logout',{numUsers:onlineCount,mUsername:socketio.name});
     User.find()
     .setOptions({multi:true})
     .update({_id:onlineUsers[socketio.name]._id},{$set:{online:false}},function(){
     });
     console.log(socketio.name+'下线了111。。。。。。。。');
     }
     else{
     console.log('下线了222。。。。。。。。');
     }
     */
  });

  //obj是数组
  socketio.on('askuserlist',function(obj){
    console.log(JSON.stringify(obj));
    for(var i=0;i<obj.length;i++){
      for(var m in onlineUsers){
        if(obj[i].toString()===onlineUsers[m]._id.toString()){
          console.log('ansuserlist'+obj[i]);
          socketio.broadcast.emit('ansuserlist'+obj[i].toString(),1);
          break;
        }
      }
    }
  })

  socketio.on('logout',function(obj){
    for(var p in onlineUsers){
      if(onlineUsers[p]._id.toString()===obj.toString()){
        delete onlineUsers[p];
        onlineCount--;
        console.log(socketio.name+'退出'+onlineCount);
      }
    }
  });

  socketio.on('usersaw',function(obj){
    var fromid=obj.from;
    var toid=obj.to;
    Chat.find()
        .setOptions({multi:true})
        .update({from:fromid,to:toid},{$set:{status:1}},function(err,chat){
          console.log('修改了'+JSON.stringify(chat));
        })
  })


  socketio.on('private message', function (from,to,msg,timeid,deviceid) {

    console.log('I received a private message by ', from, ' say to ',to, msg);

    //保存到db中
    var chatObj={
      timeid:timeid,
      from:mongoose.Types.ObjectId(from.toString()),
      to:mongoose.Types.ObjectId(to.toString()),
      status:0,
      content:msg,
      send:deviceid,
      saw:0
    };
    //由于客户端有重试机制，所以这里应该检查是否重复,根据timeid和fromuser来判断
    Chat.findOne({timeid:timeid,from:from})
        .exec(function(err,chat){
          if(err){
            socketio.emit('errorinfo','dberror');
            return console.log(err);
          }
          if(chat){
            console.log('这条信息已经存在了，给客户端返消息，不存');
            for(var p in onlineUsers){
              if(onlineUsers[p]._id.toString()===from.toString()){
                //向fromuser发送消息，说明服务器收到了
                console.log('服务器收到了，告诉客户端');
                onlineUsers[p].socket.emit('reciveMessage', {from:from,to:to,timeid:timeid,message:chat});
              }
            }
          }
          else{
            console.log('这条信息不存在，给客户端返消息，存');
            var _chat=new Chat(chatObj);
            _chat.save(function(err,chat){
              if(err){
                socketio.emit('errorinfo','dberror');
                return console.log(err);
              }
              //保存成功
              User.findOne({_id:from})
                  .exec(function(err,fromuser){
                    for(var p in onlineUsers){
                      console.log('遍历在线的人'+p+onlineUsers[p]._id.toString());
                      console.log('发送的人是'+from);
                      if(onlineUsers[p]._id.toString()===to.toString()){
                        console.log(to+'在线');
                        console.log('发送事件名称是：'+'from'+from+'to'+to+p);
                        //用于1对1
                        if(onlineUsers[p].socket) {
                          console.log(p);
                          console.log(onlineUsers[p].socket.name);
                          console.log(onlineUsers[p].socket.id);
                          //这里行不通，因为重新连接后，不知道如何把新的连接对象放进
                          //将
                          //向touser发送消息
                          onlineUsers[p].socket.emit('message', {message:chat,from:fromuser});
                          //用于main页面
                          //onlineUsers[p].socket.broadcast.emit('to' + to, {message: chat,from:fromuser});
                        }
                      }
                      if(onlineUsers[p]._id.toString()===from.toString()){
                        //向fromuser发送消息，说明服务器收到了
                        console.log('服务器收到了，告诉客户端');
                        onlineUsers[p].socket.emit('reciveMessage', {from:from,to:to,timeid:timeid,message:chat});
                      }
                    }
                  })
            })
          }
        });
  });

  socketio.on('ReciveMessage',function(chatid){
    console.log('客户端收到这条消息了，id是'+chatid.chatid+',设备id是'+chatid.deviceid);
    Chat.find()
        .setOptions({multi:true})
        .update({_id:chatid.chatid},{$set:{saw:chatid.deviceid}},function(){
          console.log(chatid.chatid+'的saw列修改成了'+chatid.deviceid);
        });
  });

  socketio.on('send',function(data)
  {
    console.log(data);
//this what you sent to client(Android)
    socketio.emit('send_response',"i got you");
//this will generate push notification
    socketio.emit('notification',data);
  });
  socketio.on('send_all',function(data)
  {
//this is what you send to all connected clients
    socketio.broadcast.emit('notification',data);
    console.log("broadcast"+data);
  });



});





