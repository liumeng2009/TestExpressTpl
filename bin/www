#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('TestExpressTpl:server');
var http = require('http');
var fs=require('fs');
var socket=require('socket.io');
var mongoose=require('mongoose');
var User=require('../app/models/user');
var Chat=require('../app/models/chat');


/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);



/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

//在线聊天模块
var onlineUsers={};
var onlineCount=0;
socket.listen(server).on('connection',function(socketio){
  /*
    obj={
      name:
      _id:
    }
  */
  socketio.on('login',function(obj){
    socketio.name=obj.name;
    User.findOne({status:true,_id:obj._id},function(err,user){
        if(err){
          socketio.emit('errorinfo','dberror');
          return console.log(err)
        }
        if(user){
          if(!onlineUsers.hasOwnProperty(obj.name)) {
            onlineUsers[obj.name] = {
              name: user.name,
              _id:user._id,
              socket: socketio
            };
            onlineCount++;
            socketio.emit('loginsuccess',{user:user});
            console.log(obj.name+'登录成功');
          }
        }
        else{
          socketio.emit('errorinfo','usererror');
        }
      });
  });

  socketio.on('disconnect',function(){
    if(onlineUsers.hasOwnProperty(socketio.name)) {
      delete onlineUsers[socketio.name];
      console.log(socketio.name+'退出');
    }
  });

  socketio.on('logout',function(obj){
    for(var p in onlineUsers){
      if(onlineUsers[p]._id.toString()===obj.toString()){
        delete onlineUsers[p];
        onlineCount--;
        console.log(socketio.name+'退出'+onlineCount);
      }
    }
  });

  socketio.on('usersaw',function(obj){
    var fromid=obj.from;
    var toid=obj.to;
    Chat.find()
      .setOptions({multi:true})
      .update({from:fromid,to:toid},{$set:{status:1}},function(err,chat){
        console.log('修改了'+JSON.stringify(chat));
      })
  })

  socketio.on('private message', function (from,to,msg) {

    console.log('I received a private message by ', from, ' say to ',to, msg);

    //保存到db中
    var chatObj={
      from:mongoose.Types.ObjectId(from.toString()),
      to:mongoose.Types.ObjectId(to.toString()),
      status:0,
      content:msg
    };
    var _chat=new Chat(chatObj);
    _chat.save(function(err,chat){
      if(err){
        socketio.emit('errorinfo','dberror');
        return console.log(err)
      }
      //保存成功
      for(var p in onlineUsers){
        console.log('遍历在线的人'+p);
        if(onlineUsers[p]._id.toString()===to.toString()){
          console.log(to+'在线');
          console.log('发送事件名称是：'+'from'+from+'to'+to);
          //用于1对1
          onlineUsers[p].socket.emit('from'+from+'to'+to, {message:msg,createAt:new Date});
          //用于main页面
          User.findOne({_id:from})
              .exec(function(err,fromuser){
                console.log('发送main事件'+'to'+to);
                onlineUsers[p].socket.emit('to'+to, {message:msg,createAt:new Date,from:fromuser});
              });
        }
      }
    })


  });
  socketio.on('message',function(obj){
    //socketio.broadcast.emit('message',obj);
  });

  socketio.on('reconnecting',function(){
    console.log('重新连接');
  })

});



